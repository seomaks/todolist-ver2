{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setIsInitializedAC","appReducer","removeTaskAC","tasks","index","findIndex","t","splice","addTaskAC","task","todoListId","unshift","updateTaskAC","setTasksAC","changeTaskEntityStatusAC","entityStatus","extraReducers","builder","addCase","addTodolistAC","todolist","removeTodolistAC","setTodolistsAC","todolists","forEach","tl","clearTodosDataAC","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","res","catch","err","console","warn","filter","changeTodolistTitleAC","changeTodolistFilterAC","map","changeTodolistEntityStatusAC","todolistsReducer","fetchTodolistsTC","items","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","useEffect","thunk","removeTaskTC","resultCode","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","app","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","handleChange","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aaec103c.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\nimport {RequestStatusType} from \"../app/app-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '0c074aaa-aceb-492d-a73f-9ca4f6d5a703'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('auth/login', data);\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{data: responseMeType}>>('auth/me');\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login');\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\ntype responseMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/todolists-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(dispatch: ErrorUtilsDispatchType, data: ResponseType<T>) => {\r\n  if (data.messages.length) {\r\n    dispatch(setAppErrorAC({error: data.messages[0]}))\r\n  } else {\r\n    dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n  }\r\n  dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (dispatch: ErrorUtilsDispatchType, message: string) => {\r\n  dispatch(setAppErrorAC({error: message}))\r\n  dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>","import {Dispatch} from 'redux'\r\nimport {\r\n  setAppStatusAC,\r\n} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {\r\n  handleServerAppError,\r\n  handleServerNetworkError\r\n} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport {\r\n  clearTodosDataAC\r\n} from \"../TodolistsList/todolists-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'auth',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n      state.isLoggedIn = action.payload.value\r\n    }\r\n  }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n  debugger\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  authAPI.login(data)\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({value: true}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      } else {\r\n        handleServerAppError(dispatch, res.data)\r\n      }\r\n    })\r\n    .catch((err: AxiosError) => {\r\n      handleServerNetworkError(dispatch, err.message)\r\n    })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  authAPI.logout()\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({value: false}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        dispatch(clearTodosDataAC())\r\n      } else {\r\n        handleServerAppError(dispatch, res.data)\r\n      }\r\n    })\r\n    .catch((err: AxiosError) => {\r\n      handleServerNetworkError(dispatch, err.message)\r\n    })\r\n}\r\n\r\n","import {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  status: 'idle' as RequestStatusType,\r\n  error: null as ErrorType,\r\n  isInitialized: false\r\n}\r\n// slice\r\nconst slice = createSlice({\r\n  name: 'app',\r\n  initialState: initialState,\r\n  reducers: {\r\n    setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n      state.status = action.payload.status\r\n    },\r\n    setAppErrorAC(state, action: PayloadAction<{error: ErrorType}>) {\r\n      state.error = action.payload.error\r\n    },\r\n    setIsInitializedAC(state, action: PayloadAction<{isInitialized: boolean}>) {\r\n      state.isInitialized = action.payload.isInitialized\r\n    },\r\n  }\r\n})\r\n// reducer\r\nexport const appReducer = slice.reducer\r\n// actions\r\nexport const {setAppStatusAC, setAppErrorAC, setIsInitializedAC} = slice.actions\r\n\r\n// thunks\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n  authAPI.me().then(res => {\r\n    if (res.data.resultCode === 0) {\r\n      dispatch(setIsLoggedInAC({value: true}));\r\n    } else {\r\n    }\r\n  })\r\n    .finally(() => {\r\n      dispatch(setIsInitializedAC({isInitialized: true}))\r\n    })\r\n}\r\n\r\n\r\n// types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ErrorType = string | null\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n","import {\r\n  addTodolistAC,\r\n  clearTodosDataAC,\r\n  removeTodolistAC,\r\n  setTodolistsAC\r\n} from './todolists-reducer'\r\nimport {\r\n  TaskPriorities,\r\n  TaskStatuses,\r\n  TaskType,\r\n  todolistsAPI,\r\n  UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n  RequestStatusType,\r\n  setAppStatusAC,\r\n} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {\r\n  handleServerAppError,\r\n  handleServerNetworkError\r\n} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n// slice\r\nconst slice = createSlice({\r\n  name: 'tasks',\r\n  initialState,\r\n  reducers: {\r\n    removeTaskAC(state, action: PayloadAction<{taskId: string, todolistId: string}>) {\r\n      const tasks = state[action.payload.todolistId]\r\n      const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n      if (index > -1) {\r\n        tasks.splice(index, 1)\r\n      }\r\n    },\r\n    addTaskAC(state, action: PayloadAction<{task: TaskType}>) {\r\n      state[action.payload.task.todoListId].unshift(action.payload.task)\r\n    },\r\n    updateTaskAC(state, action: PayloadAction<{taskId: string, model: UpdateDomainTaskModelType, todolistId: string}>) {\r\n      const tasks = state[action.payload.todolistId]\r\n      const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n      if (index > -1) {\r\n        tasks[index] = {...tasks[index], ...action.payload.model}\r\n      }\r\n    },\r\n    setTasksAC(state, action: PayloadAction<{tasks: Array<TaskType>, todolistId: string}>) {\r\n      state[action.payload.todolistId] = action.payload.tasks\r\n    },\r\n    changeTaskEntityStatusAC(state, action: PayloadAction<{taskId: string, todolistId: string, entityStatus: RequestStatusType}>) {\r\n      const tasks = state[action.payload.todolistId]\r\n      const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n      if (index > -1) {\r\n        tasks[index] = {...tasks[index], entityStatus: action.payload.entityStatus}\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(addTodolistAC, (state, action) => {\r\n    state[action.payload.todolist.id] = []\r\n    });\r\n    builder.addCase(removeTodolistAC, (state, action) => {\r\n    delete state[action.payload.id]\r\n    });\r\n    builder.addCase(setTodolistsAC, (state, action) => {\r\n    action.payload.todolists.forEach((tl:any) => {\r\n      state[tl.id] = []\r\n    })\r\n    });\r\n    builder.addCase(clearTodosDataAC, (state, action) => {\r\n    return {}\r\n    });\r\n  }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n// actions\r\nexport  const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC, changeTaskEntityStatusAC} = slice.actions\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  todolistsAPI.getTasks(todolistId)\r\n    .then((res) => {\r\n      const tasks = res.data.items\r\n      const action = setTasksAC({tasks, todolistId})\r\n      dispatch(action)\r\n      dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    })\r\n    .catch((err: AxiosError) => {\r\n      handleServerNetworkError(dispatch, err.message)\r\n    })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  dispatch(changeTaskEntityStatusAC({taskId, todolistId, entityStatus: 'loading'}))\r\n  todolistsAPI.deleteTask(todolistId, taskId)\r\n    .then(res => {\r\n      const action = removeTaskAC({taskId, todolistId})\r\n      dispatch(action)\r\n      dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    })\r\n    .catch((err: AxiosError) => {\r\n      handleServerNetworkError(dispatch, err.message)\r\n    })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({status: 'loading'}))\r\n  todolistsAPI.createTask(todolistId, title)\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(addTaskAC({task: res.data.data.item}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      } else {\r\n        handleServerAppError(dispatch, res.data)\r\n      }\r\n    })\r\n    .catch((err: AxiosError) => {\r\n      handleServerNetworkError(dispatch, err.message)\r\n    })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n  (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const state = getState()\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n    if (!task) {\r\n      //throw new Error(\"task not found in the state\");\r\n      console.warn('task not found in the state')\r\n      return\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n      deadline: task.deadline,\r\n      description: task.description,\r\n      priority: task.priority,\r\n      startDate: task.startDate,\r\n      title: task.title,\r\n      status: task.status,\r\n      ...domainModel\r\n    }\r\n\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n      .then(res => {\r\n        const action = updateTaskAC({taskId, model: domainModel, todolistId})\r\n        dispatch(action)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      })\r\n      .catch((err: AxiosError) => {\r\n        handleServerNetworkError(dispatch, err.message)\r\n      })\r\n  }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  status?: TaskStatuses\r\n  priority?: TaskPriorities\r\n  startDate?: string\r\n  deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n  RequestStatusType,\r\n  setAppErrorAC, SetAppErrorActionType,\r\n  setAppStatusAC,\r\n  SetAppStatusActionType\r\n} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n// slice\r\nconst slice = createSlice({\r\n  name: 'todolists',\r\n  initialState: initialState,\r\n  reducers: {\r\n    removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n      const index = state.findIndex(tl => tl.id === action.payload.id)\r\n      if (index > -1) {\r\n        state.splice(index, 1)\r\n      }\r\n    },\r\n    addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n      state.unshift({\r\n        ...action.payload.todolist,\r\n        filter: 'all',\r\n        entityStatus: 'idle'\r\n      })\r\n    },\r\n    changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n      const index = state.findIndex(tl => tl.id === action.payload.id)\r\n      state[index].title = action.payload.title\r\n    },\r\n    changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n      const index = state.findIndex(tl => tl.id === action.payload.id)\r\n      state[index].filter = action.payload.filter\r\n    },\r\n    setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n      return action.payload.todolists.map(tl => ({\r\n        ...tl,\r\n        filter: 'all',\r\n        entityStatus: 'idle'\r\n      }))\r\n    },\r\n    changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) {\r\n      const index = state.findIndex(tl => tl.id === action.payload.id)\r\n      state[index].entityStatus = action.payload.entityStatus\r\n    },\r\n    clearTodosDataAC(state, action: PayloadAction) {\r\n      return []\r\n    }\r\n  }\r\n})\r\n// reducer\r\nexport const todolistsReducer = slice.reducer\r\n\r\n// actions\r\nexport const {\r\n  removeTodolistAC,\r\n  addTodolistAC,\r\n  changeTodolistTitleAC,\r\n  changeTodolistFilterAC,\r\n  setTodolistsAC,\r\n  changeTodolistEntityStatusAC,\r\n  clearTodosDataAC\r\n} = slice.actions\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n  return (dispatch: any) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTodolists()\r\n      .then((res) => {\r\n        dispatch(setTodolistsAC({todolists: res.data}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return res.data\r\n      })\r\n      .then((todolists) => {\r\n        todolists.forEach((tl) => {\r\n          dispatch(fetchTasksTC(tl.id))\r\n        })\r\n      })\r\n      .catch((err: AxiosError) => {\r\n        handleServerNetworkError(dispatch, err.message)\r\n      })\r\n  }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({\r\n      id: todolistId,\r\n      entityStatus: 'loading'\r\n    }))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n      .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(removeTodolistAC({id: todolistId}))\r\n          dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n          dispatch(setAppStatusAC({status: 'failed'}))\r\n          if (res.data.messages.length) {\r\n            dispatch(setAppErrorAC({error: res.data.messages[0]}))\r\n          } else {\r\n            dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n          }\r\n        }\r\n      })\r\n      .catch((err: AxiosError) => {\r\n        handleServerNetworkError(dispatch, err.message)\r\n      })\r\n  }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTodolist(title)\r\n      .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n          dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        } else {\r\n          handleServerAppError(dispatch, res.data)\r\n        }\r\n      })\r\n      .catch((err: AxiosError) => {\r\n        handleServerNetworkError(dispatch, err.message)\r\n      })\r\n\r\n  }\r\n}\r\n\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.updateTodolist(id, title)\r\n      .then((res) => {\r\n        dispatch(changeTodolistTitleAC({id: id, title}))\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      })\r\n      .catch((err: AxiosError) => {\r\n        handleServerNetworkError(dispatch, err.message)\r\n      })\r\n  }\r\n}\r\n\r\n// types\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type ClearDataActionType = ReturnType<typeof clearTodosDataAC>;\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType\r\n  entityStatus: RequestStatusType\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {AddBox} from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.disabled}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n        if (props.disabled) {setEditMode(false)}\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n\r\n        return editMode\r\n          ? <TextField value={title} onChange={changeTitle} autoFocus\r\n                       onBlur={activateViewMode}/>\r\n          : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {RequestStatusType} from \"../../../../app/app-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    entityStatus: RequestStatusType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler} disabled={props.entityStatus === 'loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title}\r\n                          onChange={changeTodolistTitle}\r\n                          disabled={props.entityStatus === 'loading'}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                                                entityStatus={t.entityStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n  addTodolistTC,\r\n  changeTodolistFilterAC,\r\n  changeTodolistTitleTC,\r\n  fetchTodolistsTC,\r\n  FilterValuesType,\r\n  removeTodolistTC,\r\n  TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {\r\n  addTaskTC,\r\n  removeTaskTC,\r\n  TasksStateType,\r\n  updateTaskTC\r\n} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n  const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n      if (!isLoggedIn) {\r\n          return;\r\n      }\r\n    const thunk = fetchTodolistsTC()\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const removeTask = useCallback(function (id: string, todolistId: string) {\r\n    const thunk = removeTaskTC(id, todolistId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const addTask = useCallback(function (title: string, todolistId: string) {\r\n    const thunk = addTaskTC(title, todolistId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n    const thunk = updateTaskTC(id, {status}, todolistId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n    const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n    const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n    dispatch(action)\r\n  }, [])\r\n\r\n  const removeTodolist = useCallback(function (id: string) {\r\n    const thunk = removeTodolistTC(id)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n    const thunk = changeTodolistTitleTC(id, title)\r\n    dispatch(thunk)\r\n  }, [])\r\n\r\n  const addTodolist = useCallback((title: string) => {\r\n    const thunk = addTodolistTC(title)\r\n    dispatch(thunk)\r\n  }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={\"login\"}/>\r\n    }\r\n\r\n  return <>\r\n    <Grid container style={{padding: '20px'}}>\r\n      <AddItemForm addItem={addTodolist}/>\r\n    </Grid>\r\n    <Grid container spacing={3}>\r\n      {\r\n        todolists.map(tl => {\r\n          let allTodolistTasks = tasks[tl.id]\r\n\r\n          return <Grid item key={tl.id}>\r\n            <Paper style={{padding: '10px'}}>\r\n              <Todolist\r\n                id={tl.id}\r\n                title={tl.title}\r\n                tasks={allTodolistTasks}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                addTask={addTask}\r\n                changeTaskStatus={changeStatus}\r\n                filter={tl.filter}\r\n                entityStatus={tl.entityStatus}\r\n                removeTodolist={removeTodolist}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTodolistTitle={changeTodolistTitle}\r\n              />\r\n            </Paper>\r\n          </Grid>\r\n        })\r\n      }\r\n    </Grid>\r\n  </>\r\n}\r\n","import React, { useState } from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {ErrorType, setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n  props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n // const [open, setOpen] = useState(true);\r\n  const dispatch = useDispatch()\r\n\r\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n //   setOpen(false);\r\n    dispatch(setAppErrorAC({error: null}))\r\n  };\r\n\r\n  const error = useSelector<AppRootStateType, ErrorType>(state => state.app.error)\r\n\r\n  return (\r\n    <Snackbar open={ error !== null } autoHideDuration={6000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {LoginParamsType} from \"../../api/todolists-api\";\r\nimport {Navigate} from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n  const dispatch = useDispatch()\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false\r\n    },\r\n    validate: (values) => {\r\n      const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {};\r\n      if (!values.email) {\r\n        errors.email = 'Required';\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n      } else if (!values.password.length) {\r\n        errors.password = 'Enter password'\r\n      } else if (values.password.length <= 2) {\r\n        errors.password = 'Incorrect password'\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: values => {\r\n      dispatch(loginTC(values))\r\n      formik.resetForm()\r\n    },\r\n  })\r\n\r\n  if (isLoggedIn) {\r\n    return <Navigate to={\"/\"}/>\r\n  }\r\n\r\n  return <Grid container justifyContent={'center'}>\r\n    <Grid item justifyContent={'center'}>\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <FormControl>\r\n          <FormLabel>\r\n            <p>To log in get registered\r\n              <a href={'https://social-network.samuraijs.com/'}\r\n                 target={'_blank'}> here\r\n              </a>\r\n            </p>\r\n            <p>or use common test account credentials:</p>\r\n            <p>Email: free@samuraijs.com</p>\r\n            <p>Password: free</p>\r\n          </FormLabel>\r\n          <FormGroup>\r\n            <TextField\r\n              label=\"Email\"\r\n              margin=\"normal\"\r\n              {...formik.getFieldProps('email')}\r\n            />\r\n            {formik.touched.email &&\r\n              formik.errors.email &&\r\n              <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n            <TextField\r\n              type=\"password\"\r\n              label=\"Password\"\r\n              margin=\"normal\"\r\n              {...formik.getFieldProps('password')}\r\n            />\r\n            {formik.touched.password &&\r\n              formik.errors.password &&\r\n              <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n\r\n            <FormControlLabel\r\n              label={'Remember me'}\r\n              control={<Checkbox\r\n                onChange={formik.handleChange}\r\n                checked={formik.values.rememberMe}\r\n                name=\"rememberMe\"\r\n              />}/>\r\n            <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n              Login\r\n            </Button>\r\n          </FormGroup>\r\n        </FormControl>\r\n      </form>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\n\r\n// You can learn about the difference by reading this guide on minimizing bundle size.\r\n// https://mui.com/guides/minimizing-bundle-size/\r\n// import { AppBar, Button, Container, IconButton, Toolbar, Typography } from '@mui/material';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {CircularProgress, LinearProgress} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch()\r\n  const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n  const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  useEffect(() => {\r\n    dispatch(initializeAppTC())\r\n  }, [])\r\n\r\n  const logoutHandler = () => {\r\n    dispatch(logoutTC())\r\n  }\r\n\r\n  if (!isInitialized) {\r\n    return <div\r\n      style={{\r\n        position: 'fixed',\r\n        top: '30%',\r\n        textAlign: 'center',\r\n        width: '100%'\r\n      }}>\r\n      <CircularProgress/>\r\n    </div>\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu/>\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            News\r\n          </Typography>\r\n          {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n        </Toolbar>\r\n        {status === 'loading' && <LinearProgress/>}\r\n      </AppBar>\r\n      <Container fixed>\r\n        <Routes>\r\n          <Route path=\"/\" element={<TodolistsList/>}/>\r\n          <Route path=\"login\" element={<Login/>}/>\r\n          <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n          <Route path=\"*\" element={<Navigate to=\"/404\"/>}/>\r\n        </Routes>\r\n      </Container>\r\n      <ErrorSnackbar/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todolistsReducer,\r\n  app: appReducer,\r\n  auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './app/store';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n          <BrowserRouter>\r\n            <App/>\r\n          </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}